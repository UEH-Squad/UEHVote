<div class="pop-up">
    <div class="w-100 h-100 d-flex justify-content-center align-items-center">
        <div class="pop-up__container position-relative">
            <span @onclick="CloseModal" class="material-icons-outlined btn-close position-absolute">
                close
            </span>
            
            <div class="pop-up__content">
                <p class="title text-left">Thêm/ chỉnh sửa đề cử</p>
                <div class="row pop-up-form">
                    <EditForm Model="@nomination">
                        <DataAnnotationsValidator />
                        <div class="pop-up-form-content">
                            <div class="form-group mb-4">
                                <div class="mb-3">
                                    Đơn vị <span class="required-asterick">(*)</span>
                                </div>
                                <InputText @bind-Value="nomination.Organization" class="form-control" placeholder="Nhập đơn vị" />
                                <ValidationMessage For=@(() => nomination.Organization) />
                            </div>

                            <div class="form-group mb-4">
                                <div class="mb-3">
                                    Tên đề cử <span class="required-asterick">(*)</span>
                                </div>
                                <InputText @bind-Value="nomination.NominationName" class="form-control" placeholder="Nhập tên đề cử" />
                                <ValidationMessage For=@(() => nomination.NominationName) />
                            </div>

                            <div class="form-group mb-4">
                                <div class="mb-3">Thêm ảnh cover</div>
                                <UEHVote.Shared.Components.UploadImg InputFileChanged="HandleFileChanged"
                                                                     ImageDiscarded="HandleImageDiscarded"
                                                                     PreviewImgSrc="@nomination.Banner"
                                                                     ShowPreview="true" />
                            </div>

                            <div class="form-group mb-4">
                                <div class="mb-3">
                                    Nội dung <span class="required-asterick">(*)</span>
                                </div>
                                <TinyMCEEditor @bind-Value="nomination.Content" />
                                <ValidationMessage For=@(() => nomination.Content) />
                            </div>

                            <div class="form-group mb-4">
                                <div class="mb-3">
                                    Hình ảnh đề cử
                                </div>
                                <UEHVote.Shared.Components.PicturesWall />
                            </div>

                            <div class="form-group mb-5">
                                <div class="mb-3">
                                    Video đề cử
                                </div>
                                <InputText @bind-Value="nomination.VideoLink" class="form-control" placeholder="Chèn link video" />
                            </div>
                        </div>

                        <div class="d-flex justify-content-end mt-3 mb-5 me-3">
                            <button @onclick="CloseModal" class="btn btn-cancel me-3">Hủy</button>
                            <button @onclick="ShowPopupConfirm" class="btn btn-save">Lưu</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    private Nomination nomination = new() { };
    private IBrowserFile uploadFile;

    [CascadingParameter]
    public IModalService ResultModal { get; set; }


    private void HandleFileChanged(InputFileChangeEventArgs args)
    {
        uploadFile = args.File;
    }

    private async Task HandleImageDiscarded()
    {
        uploadFile = null;
    }

    [CascadingParameter]
    public BlazoredModalInstance Modal { get; set; }


    private async Task CloseModal()
    {
        await Modal.CloseAsync();
    }

    private async Task ShowPopupConfirm()
    {
        var options = new Blazored.Modal.ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
        };
        await Modal.CloseAsync();
        ResultModal.Show<ConfirmPopUp>("", options);
    }
}
