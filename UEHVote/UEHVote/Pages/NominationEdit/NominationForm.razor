@inject MessageService _message

<div class="container-fluid">
    <div class="row">

        <EditForm Model="@nomination">
            <DataAnnotationsValidator />

            <div class="form-group mb-4">
                <div class="mb-3">
                    Đơn vị <span class="required-asterick">(*)</span>
                </div>
                <InputText @bind-Value="nomination.Organization" class="form-control" placeholder="Nhập đơn vị" />
                <ValidationMessage For=@(() => nomination.Organization) />
            </div>

            <div class="form-group mb-4">
                <div class="mb-3">
                    Tên đề cử <span class="required-asterick">(*)</span>
                </div>
                <InputText @bind-Value="nomination.NominationName" class="form-control" placeholder="Nhập tên đề cử" />
                <ValidationMessage For=@(() => nomination.NominationName) />
            </div>

            <div class="form-group mb-4">
                <div class="mb-3">Thêm ảnh cover</div>
                <UploadImg InputFileChanged="HandleFileChanged"
                           ImageDiscarded="HandleImageDiscarded"
                           PreviewImgSrc="@nomination.Banner"
                           ShowPreview="true" />
            </div>

            <div class="form-group mb-4">
                <div class="mb-3">
                    Nội dung <span class="required-asterick">(*)</span>
                </div>
                <TinyMCEEditor @bind-Value="nomination.Content" />
                <ValidationMessage For=@(() => nomination.Content) />
            </div>

            <div class="form-group mb-4">
                <div class="mb-3">
                    Hình ảnh đề cử
                </div>
                <PicturesWall />
            </div>

            <div class="form-group mb-5">
                <div class="mb-3">
                    Video đề cử
                </div>
                <InputText @bind-Value="nomination.VideoLink" class="form-control" placeholder="Chèn link video" />
            </div>

            @if (IsNomination)
            {
                <div class="d-flex justify-content-center mb-5">
                    <button class="btn btn-cancel me-3">Hủy</button>
                    <button @onclick="ShowResultModal" class="btn btn-save py-2 px-3">Lưu</button>
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    private Nomination nomination = new() { };
    private IBrowserFile uploadFile;

    [Parameter]
    public bool IsNomination { get; set; } = false;
    [CascadingParameter]
    public IModalService ResultModal { get; set; }

    private async Task ShowResultModal()
    {
        var options = new Blazored.Modal.ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            UseCustomLayout = true,
        };
        ResultModal.Show<ResultPopUp>("", options);
    }

    private void HandleFileChanged(InputFileChangeEventArgs args)
    {
        uploadFile = args.File;
    }

    private async Task HandleImageDiscarded()
    {
        uploadFile = null;
    }
}
