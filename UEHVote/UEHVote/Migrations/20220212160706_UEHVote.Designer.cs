// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UEHVote.Data.Context;

namespace UEHVote.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220212160706_UEHVote")]
    partial class UEHVote
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("UEHVote.Models.ActivityImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElectionId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.ToTable("ActivityImages");
                });

            modelBuilder.Entity("UEHVote.Models.Candidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ElectionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("UEHVote.Models.CandidateImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateImages");
                });

            modelBuilder.Entity("UEHVote.Models.Election", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Banner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForIndividuals")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Video")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("UEHVote.Models.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Organizations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Ban Tổ chức - Xây dựng Đoàn",
                            Type = 0
                        },
                        new
                        {
                            Id = 2,
                            Name = "Ban Phong trào - Tình nguyện",
                            Type = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Ban Học tập - Nghiên cứu khoa học - Quan hệ quốc tế",
                            Type = 0
                        },
                        new
                        {
                            Id = 4,
                            Name = "Ban Tổ chức - Xây dựng Hội",
                            Type = 0
                        },
                        new
                        {
                            Id = 5,
                            Name = "Ban Tình nguyện - Hỗ trợ sinh viên",
                            Type = 0
                        },
                        new
                        {
                            Id = 6,
                            Name = "Khoa Luật",
                            Type = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Khoa Kế toán",
                            Type = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Khoa Kinh tế",
                            Type = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Khoa Khoa học xã hội",
                            Type = 1
                        },
                        new
                        {
                            Id = 10,
                            Name = "Khoa Ngân hàng",
                            Type = 1
                        },
                        new
                        {
                            Id = 11,
                            Name = "Khoa Ngoại ngữ",
                            Type = 1
                        },
                        new
                        {
                            Id = 12,
                            Name = "Khoa Quản lý nhà nước",
                            Type = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Khoa Quản trị",
                            Type = 1
                        },
                        new
                        {
                            Id = 14,
                            Name = "Khoa Tài chính",
                            Type = 1
                        },
                        new
                        {
                            Id = 15,
                            Name = "Khoa Tài chính công",
                            Type = 1
                        },
                        new
                        {
                            Id = 16,
                            Name = "Khoa Công nghệ thông tin kinh doanh",
                            Type = 1
                        },
                        new
                        {
                            Id = 17,
                            Name = "Khoa Kinh doanh quốc tế - Marketing",
                            Type = 1
                        },
                        new
                        {
                            Id = 18,
                            Name = "Khoa Toán - Thống kê",
                            Type = 1
                        },
                        new
                        {
                            Id = 19,
                            Name = "Viện Du lịch",
                            Type = 1
                        },
                        new
                        {
                            Id = 20,
                            Name = "Viện Đào tạo quốc tế",
                            Type = 1
                        },
                        new
                        {
                            Id = 21,
                            Name = "KTX 135 Trần Hưng Đạo",
                            Type = 1
                        },
                        new
                        {
                            Id = 22,
                            Name = "KT 43-45 Nguyễn Chí Thanh",
                            Type = 1
                        },
                        new
                        {
                            Id = 23,
                            Name = "Câu lạc bộ Anh Văn - BELL",
                            Type = 2
                        },
                        new
                        {
                            Id = 24,
                            Name = "Câu lạc bộ Bóng chuyền",
                            Type = 2
                        },
                        new
                        {
                            Id = 25,
                            Name = "Câu lạc bộ Dân ca",
                            Type = 2
                        },
                        new
                        {
                            Id = 26,
                            Name = "Câu lạc bộ Giai điệu trẻ",
                            Type = 2
                        },
                        new
                        {
                            Id = 27,
                            Name = "Câu lạc bộ Guitar - UEHG",
                            Type = 2
                        },
                        new
                        {
                            Id = 28,
                            Name = "Câu lạc bộ Tiếng Pháp - CFE",
                            Type = 2
                        },
                        new
                        {
                            Id = 29,
                            Name = "Câu lạc bộ Võ thuật",
                            Type = 2
                        },
                        new
                        {
                            Id = 30,
                            Name = "Câu lạc bộ Chuyện to nhỏ",
                            Type = 2
                        },
                        new
                        {
                            Id = 31,
                            Name = "Câu lạc bộ Dynamic",
                            Type = 2
                        },
                        new
                        {
                            Id = 32,
                            Name = "Đội Công tác xã hội",
                            Type = 2
                        },
                        new
                        {
                            Id = 33,
                            Name = "Đội Văn nghệ xung kích",
                            Type = 2
                        },
                        new
                        {
                            Id = 34,
                            Name = "Đội Cộng tác viên",
                            Type = 2
                        },
                        new
                        {
                            Id = 35,
                            Name = "Nhóm Truyền thông Sinh viên - S Communications",
                            Type = 2
                        },
                        new
                        {
                            Id = 36,
                            Name = "Câu lạc bộ Bất động sản - REC",
                            Type = 3
                        },
                        new
                        {
                            Id = 37,
                            Name = "Câu lạc bộ Chuyên viên Nhân sự Tập sự - HuReA",
                            Type = 3
                        },
                        new
                        {
                            Id = 38,
                            Name = "Câu lạc bộ Chứng khoán - SCUE",
                            Type = 3
                        },
                        new
                        {
                            Id = 39,
                            Name = "Câu lạc bộ Công nghệ Kinh tế - ET Group",
                            Type = 3
                        },
                        new
                        {
                            Id = 40,
                            Name = "Câu lạc bộ Kế toán - Kiểm toán A²C",
                            Type = 3
                        },
                        new
                        {
                            Id = 41,
                            Name = "Câu lạc bộ Kinh doanh quốc tế - IBC",
                            Type = 3
                        },
                        new
                        {
                            Id = 42,
                            Name = "Câu lạc bộ Nghiên cứu Kinh tế Trẻ - YoRE",
                            Type = 3
                        },
                        new
                        {
                            Id = 43,
                            Name = "Câu lạc bộ Nhân Sự Khởi Nghiệp - HR Startup",
                            Type = 3
                        },
                        new
                        {
                            Id = 44,
                            Name = "Câu lạc bộ Pháp lý",
                            Type = 3
                        },
                        new
                        {
                            Id = 45,
                            Name = "Câu lạc bộ Thương mại - IC",
                            Type = 3
                        },
                        new
                        {
                            Id = 46,
                            Name = "Câu lạc bộ Tiếng Anh - Apple Club",
                            Type = 3
                        },
                        new
                        {
                            Id = 47,
                            Name = "Câu lạc bộ Lý luận trẻ",
                            Type = 3
                        },
                        new
                        {
                            Id = 48,
                            Name = "Nhóm Hỗ Trợ Sinh Viên - SSG",
                            Type = 3
                        },
                        new
                        {
                            Id = 49,
                            Name = "Nhóm Sinh viên Nghiên cứu Marketing - Margroup",
                            Type = 3
                        },
                        new
                        {
                            Id = 50,
                            Name = "Nhóm Sinh Viên Nghiên Cứu Tài Chính - SFR",
                            Type = 3
                        },
                        new
                        {
                            Id = 51,
                            Name = "Nhóm Sinh Viên Nghiên Cứu Thuế - TaxGroup",
                            Type = 3
                        },
                        new
                        {
                            Id = 52,
                            Name = "Nhóm Sinh viên Nghiên cứu Du lịch - Travel Group",
                            Type = 3
                        });
                });

            modelBuilder.Entity("UEHVote.Models.Vote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElectionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ElectionId");

                    b.HasIndex("UserId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("UEHVote.Models.VotedCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int>("VoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.HasIndex("VoteId");

                    b.ToTable("VotedCandidates");
                });

            modelBuilder.Entity("UEHVote.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("StudentId")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("OrganizationId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UEHVote.Models.ActivityImage", b =>
                {
                    b.HasOne("UEHVote.Models.Election", "Election")
                        .WithMany("ActivityImages")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");
                });

            modelBuilder.Entity("UEHVote.Models.Candidate", b =>
                {
                    b.HasOne("UEHVote.Models.Election", "Election")
                        .WithMany("Candidates")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UEHVote.Models.Organization", "Organization")
                        .WithMany("Candidates")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Election");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UEHVote.Models.CandidateImage", b =>
                {
                    b.HasOne("UEHVote.Models.Candidate", "Candidate")
                        .WithMany("CandidateImages")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("UEHVote.Models.Election", b =>
                {
                    b.HasOne("UEHVote.Models.User", "User")
                        .WithMany("Elections")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UEHVote.Models.Vote", b =>
                {
                    b.HasOne("UEHVote.Models.Election", "Election")
                        .WithMany("Votes")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UEHVote.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId");

                    b.Navigation("Election");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UEHVote.Models.VotedCandidate", b =>
                {
                    b.HasOne("UEHVote.Models.Candidate", "Candidate")
                        .WithMany("VotedCandidates")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UEHVote.Models.Vote", "Vote")
                        .WithMany("VotedCandidates")
                        .HasForeignKey("VoteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Candidate");

                    b.Navigation("Vote");
                });

            modelBuilder.Entity("UEHVote.Models.User", b =>
                {
                    b.HasOne("UEHVote.Models.Organization", "Organization")
                        .WithMany("Users")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("UEHVote.Models.Candidate", b =>
                {
                    b.Navigation("CandidateImages");

                    b.Navigation("VotedCandidates");
                });

            modelBuilder.Entity("UEHVote.Models.Election", b =>
                {
                    b.Navigation("ActivityImages");

                    b.Navigation("Candidates");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("UEHVote.Models.Organization", b =>
                {
                    b.Navigation("Candidates");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("UEHVote.Models.Vote", b =>
                {
                    b.Navigation("VotedCandidates");
                });

            modelBuilder.Entity("UEHVote.Models.User", b =>
                {
                    b.Navigation("Elections");

                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
